Layer와 Layerd구조
  이러한 형태의 구조는 상위레이어일 경우 하위레이어에 의존함
	


네트워크와 네트워킹 개념
  NetWork -> 관계
  NetWorking -> 상호작용
  OSI 7 Layer -> 네트워크에서 개념을 담당함으로 바로 공부하기에는 무리
	TCP/IP 공부 후 OSI 7 Layer을 공부해보자  
  개념과 구현(ex) 연예인 - 박은빈) 상속과 비슷한 느낌



User mode와 Kernel mode
		      Application(Chrome)	App L7
		 			Presentation
 	User mode    File			Session L5
	----------------------------------------------------------
	Kernel mode			Transport(TCP) L4
S/W Driver(하드웨어를 제어하기 위해 필요)	Network(IP) L3
----------------------------------------------------------------------
H/W NIC( network interface card) =랜카드	Data Link(커널의 Driver Hw 일부분)L2
					Physical (Nic) L1


  App에서 kernel mode에 접근하기 위해서는 인터페이스가 필요
  Socekt(File) -> TCP/IP를 추상화시키 인터페이스





OSI 7 Layer와 식별자
			App (HTTP)
			Presentation
 	User mode 	Session (SSL==TLS) L5
	----------------------------------------------------------
	Kernel mode	Transport(TCP, UDP) L4 식별자 port 번호
S/W 			Network(Internet) L3 -> 식별자 : IP 주소
----------------------------------------------------------------------
H/W			Data Link(Ethernet)(유선)->식별자 : MAC주소
			Physical 

	HTTP+Session -> HTTPS

	MAC주소(물리적 주소) : 랜(NIC)의 식별자, 48비트 주소체계
	IP주소: (host) : 인터넷을 사용하는 컴퓨터의 식별자(v4,v6)
	Port 번호 : 분야에 따라 다른 식별자
		  L2 관점 : 인터페이스 (LAN 케이블 단자)
		  L4 관점 : Service
		  L5~7 관점 : Process

	cmd에서 ipconfig /all 명령을 통해 각각의 실제 주소확인 가능
무선 LAN 어댑터 Wi-Fi:

   연결별 DNS 접미사. . . . :
   설명. . . . . . . . . . . . : Intel(R) Dual Band Wireless-AC 8260
   물리적 주소 . . . . . . . . : 00-C2-C6-B6-44-73
   DHCP 사용 . . . . . . . . . : 예
   자동 구성 사용. . . . . . . : 예
   링크-로컬 IPv6 주소 . . . . : fe80::5514:1a48:fd7:58d2%7(기본 설정)
   IPv4 주소 . . . . . . . . . : 192.168.0.13(기본 설정)
   서브넷 마스크 . . . . . . . : 255.255.255.0
   임대 시작 날짜. . . . . . . : 2023년 6월 22일 목요일 오후 4:15:17
   임대 만료 날짜. . . . . . . : 2023년 6월 22일 목요일 오후 8:15:15
   기본 게이트웨이 . . . . . . : 192.168.0.1
   DHCP 서버 . . . . . . . . . : 192.168.0.1
   DHCPv6 IAID . . . . . . . . : 83935942
   DHCPv6 클라이언트 DUID. . . : 00-01-00-01-25-05-3D-92-98-83-89-22-20-73
   DNS 서버. . . . . . . . . . : 111.118.0.1
                                 111.118.0.11
   Tcpip를 통한 NetBIOS. . . . : 사용





DOD(department of defence) 분류
 	User mode 	Application
	----------------------------------------------------------
	Kernel mode	host to host
S/W 			Internet
----------------------------------------------------------------------
H/W			Network Access





Host는 이렇게 외우자
  host : computer + network 네트워크가 연결된 컴퓨터
  host를 지칭하는 크게 두가지

	switch : 네트워크 자체를 이루는 host -> Infra Structure
		Ip주소가 붙는 경우
		Router(네트워크장비), IPS(보안 스위치),
		Tab,Aggregation(관리목적)

	end-point(단말기) : 네트워크 이용주체
	    -> Client, Server, Peer(P2P 통신->서비스제공자이자 이용자)



Switch가 하는 일
  네트워크 -> 고속도로망과 비슷
	출발지 - 교차로(Switch)(인터페이스 선택=switching) - 목적지
		    ㄴ 이정표를 통해 경로 선택 근거를 찾음
   Packet(자동차, L3 단위)
   Switch : 선택하는 근거-> Ip주소 -> L3 switching(Router) 
   Router : 라우터안에 이정표(Router table)가 존재함
	
  ex) Mac 주소에서는 L2 switching, port번호에서는 L4 switching
       HTTP에서는 L7 switching
  
  스위칭에서 고민해야 할 주제는 비용(Matric 값)
			       ㄴ cmd에서 route print로 확인가능
   비용이 낮은쪽으로 이동함





NIC, L2 Frame, LAN 카드 그리고 Mac 주소
  NIC은 흔히 Lan카드, 유/무선 NIC이 있지만 굳이 구별하지 않음
  NIC은 H/W이며 Mac(Media access control)주소를 갖는다
  cf) USB(universial serial bus) 
  네트워크 규모 : WAN > MAN(도시망) > LAN(home규모의 망)

  Frame(1514byte 정도) : L2 레이어에서의 유통단위
  정보 Frame(10KB)
  Frame 구성 :  |Header(도착,출발 주소)|정보|

  유선의 속도 : 1Gbps -> bit / 1GBps -> byte(단위조심)
  광케이블 : 10Gbps




L2 Access switch( 공유기에 연결되는 단자 부분 -> 인터페이스)
  end-point와 직접 연결되는 스위치(Mac 주소를 근거로 스위칭)
  Link-up(케이블이 정상 연결), Link-down (케이블 비정상연결)
  L2 switch에서 상위(L3) 라우터로 열결되는 경우 up-link라고 함



L2 distribution switch
  L2 Access 스위치를 위한 스위치(VLAN 기능을 제공)
pc1 --|----Access switch---- Distribution Switch ----L3 Switch---Internet
pc2 --|                                     |
pc3 --|                              Access Switch
		           |--------|-------|
		         pc4    pc5    pc6
	-> 상위 switch일수록 가격이 높아짐




Lan과 Wan의 경계 그리고 Broadcast(방송주소) != Unicast(효율이 좋음)
			ㄴ 효율이 안좋음
			ㄴ 노이즈가 될 수 있어서 최소화 해야함
  Mac 주소(FF-FF-FF-FF-FF-FF)가 모두 1이면 Broadcast라 함(항상 참)

     LAN(규모)
pc1 --|----Access switch---- Distribution Switch ----L3 Switch---Internet
pc2 --|                                     |
pc3 --|                              Access Switch
		            |--------|-------|
		           pc4    pc5    pc6

 임의의 Pc1이 broadcast를 하게되면 2~6은 통신불가
 뿐만 아니라 여러방향으로 Frame을 쏴 눈덩이처럼 커져 네트워크가 느려짐
  -> BroadCast를 최소화 해야함  
  -> Distibution이 broadcast를 받지 않게(broad범위를 줄임
      하여 pc456은 영향을 안받게 할수 도 있음 cf)456이 필요한 broadcast인 경우도 있어 복잡함
  -> IP 주소상에서는 Broadcast를 수신하는 범위를 잡아줌




네트워크의 규모

			App (HTTP)
			Presentation
 	User mode 	Session (SSL==TLS) 
	----------------------------------------------------------
	Kernel mode	Transport(TCP, UDP)
S/W(Logical ≈  Virtual)	Network(Internet)
----------------------------------------------------------------------
H/W(Physical)		Data Link(Ethernet)
			Physical 

하드웨어 단계의 네트워크(유선)는 물리적, 소포트웨어 단계에서는 실체가 x
IT분야에서 S/W(Logical) 영역을 Virtual이라기도 함
CPU를 주로 Machine이라 하는데
H/W기능인 CPU를 S/W로 구현하게 되면 이릉 Virtual Machine이라 함

아래 규모 정도는 완벽한게 아니라 요령임
LAN의 규모 : 얼추 H/W Layer 범위 정도의 네트워크(완벽한 정의는 아님)
WAN의 규모 : L3 Layer 범위




IPv4주소의 구조 :
			App (HTTP)
			Presentation
 	User mode 	Session (SSL==TLS) 
	----------------------------------------------------------
	Kernel mode	Transport(TCP, UDP)
S/W(Logical ≈  Virtual)	Network(IP) IPv4->32bit = 8bit*4
-------------------------------------------------- --------------------
H/W(Physical)		Data Link(Ethernet)
			Physical 

  192.168.0.09 -> 대체로 공유기 주소( . 사이당 0~255(8bit))
|32bit(networkID).8bit(HostId)|
  IP가 주소를 찾는 원리가 택배와 비슷 
  NetworkId에 해당하는 부분까지 네트워크를 버스에 태워 찾고
  HostId로 세부 주소를 찾아감



L3 Packet(단위 데이터)-> WireShock로 직접 볼 수 있음
  Packet 자체로 L3 IP Packet을 의미함
  Header(주소 : src->des)과 Payload(내용)로 구성됨 (L2 Frame 도 비슷)
  최대 크기는 MTU(Maximum Transmission unit)(대체로 1500byte)


En/Decapsulation(캡슐화,단위화)(보안면에서 직접으로 정보 보이지않음)
  마치 러시아 목각 인형인 것처럼

L2 Frame
 -----------------------------------------------------------------|
 |   L2	|		L2 Payload #1(L3 IP Packet)  | L2 -> Frame
 |	|   --------------------------------------------------- |
 | HEADER|  |    L3	  |        L3 Payload #2 (TCP Segment) |  L3 -> Packet
 |	|   |HEADER|  ----------------------------------------|  
 |	|   |          |  |  L4 Header | L4 Payload #3	 | L4 -> Segment
 |	|   -----------------------------------------------------|
 ------------------------------------------------------------------|
   Payload #3안에 있는 정보부터는 Stream이라함



패킷의 생성,전달,소멸
  택배와 비슷
철수(process)
    |                                                              
 우편(packet) -> 기사(Gateway) -------------------집(host) -> 영희(process)
					 ㄴ영희 이름(port)

			-------------------------------------
			| 	 Process 
			|
			|
			-------------------------------------		
 	User mode 	|   File,Socket(TCP/IP를 추상화한 인터페이스)
	----------------------------------------------------------
	Kernel mode	 TCP
			  IP

S/W(Logical ≈  Virtual)	 Driver
-------------------------------------------------- --------------------
H/W(Physical)		

  프로세스가 Data를 보낼때 File(socket)에 Send(write)함
  -> TCP단계에서 TCP header을 붙힘 (segment화를 함)
  -> IP단계에서 IP header을 붇힘
  -> Driver단계에서 Ethernet 헤더가 붙어 Frame이 됨
  -> Frame을 송신함
  -> L2 Access Switch 를 만나고 라우터 Gateway를 통해 인터넷으로 나감




계층별 데이터 단위
			-------------------------------------
			| 	 Chrome
			|
			|
			-------------------------------------		
 	User mode 	|   Socket -> Stream
	----------------------------------------------------------
	Kernel mode	 TCP     -> Segment MSS(1460 byte)
			  IP       -> Packet MTU(최대크기 1500byte)

S/W(Logical ≈  Virtual)	 Driver  			  ---
------------------------------------------------- -----------------  |
H/W(Physical)	                                           	   | L1~2: Frame						     	   |
						  ----

  Stream은 시작이 있지만 끝을 정의할 수없음( 끝은 Process가 결정함)
                                     ㄴ 크기를 알 수 없음
   Stream이 MSS, MTU보다 커지게 되면 Stream을 분할함(Segmentation)
   Datagram의 경우는 UDP에서 사용되며 Packet과 비슷  




TCP/IP 송수신 구조 

  1.4MB -> 1.4KB 단위 주의 -> 1024배 차이남
  TCP는 연결이 기본적으로 되야함 -> 가정하고 아래 상황 진행


송신(Encapsulation)
  
			-------------------------------------
			| 	
			|	SERVER ( 프로세스별 버퍼)
			|
			-------------------------------------		
 	User mode 	|  File( Socket I/O에 붙은 Buffer)
	----------------------------------------------------------
	Kernel mode	 TCP     
			  IP       

S/W(Logical ≈  Virtual)	 Driver  			    
------------------------------------------------- -------------------- 
H/W(Physical)	             

  HDD,SDD에서 File(Block)을 읽어 프로세스 버퍼 크기에 맞게 분해 복사 후 프로세스 버퍼에 저장함                      	      		
  Process 버퍼값을 복사하여 Socket 버퍼에 저장( Send/Receive)함
  TCP 스텍에서 MSS크기에 맞게 분해(Segementation)하고 번호를 부여함	
  IP에서 segement를 캡슐화하여 Packet을 만듬	
  L2 단계에서 Frame으로 유통됨

  Segement 번호 순으로 송신하는 것이 이상적
        -> 수신자가 번호 순대로 받았는지 확인하기 위해 Ack를 wait함  
        -> 수신자의 소켓 여유공간도 고려해줌(스윗하누)



수신(Decapsulation)
			-------------------------------------
			| 	
			|Chrome
			|
			-------------------------------------		
 	User mode 	|  File( Socket I/O에 붙은 Buffer)
	----------------------------------------------------------
	Kernel mode	 TCP     
			  IP       

S/W(Logical ≈  Virtual)	 Driver  			    
------------------------------------------------- -------------------- 
H/W(Physical)

  Frame->Packet->Segement로 분해하며 헤더는 버림
  Socket 버퍼에 번호대로 저장함
  Chrome 버퍼에서 소켓버퍼의 값을 Read/Recieve함
  하지만 버퍼간 채움과 비움의 속도 차이가 잇음
     -> 톱니바퀴 처럼 티키타카 잘해야함
  데이터를 손실하지 않기 위해 Socket버퍼의 여유공간이 있어야 함
 
  수신과정에서 TCP가 Packet을 잘 받았으면 ACK이라는 피드백을 해줌
  ACK는 Segment번호와 소켓의 여유공간 정보도 포함됨



Network 장애
  1. Loss (유실) -> 네트워크 상 오류
  2. Re-transmission + ACK-Duplicate ->네트워크 or end-point 오류
	 송신자 입장에서 Ack가 안와서 다시 데이터를 보내줌
	   ->근데 간발의 차로 ACk을 받아버림
 	 수신자 입장에서 ACK를 보냈는데 같은 Segement가 중복하여 옴
  3. Out of Order -> 네트워크상 오류	
	segement의 순서에 맞지 않게 수신함
  4. Zero Window  -> End-point(App)의 문제
	수신측의 소켓버퍼의 여유 공간을 Window Size라 함
             즉, 수신측 소켓버퍼가 꽉찼다는 뜻 
	   -> 프로세스가 소켓버퍼를 못비워줌으로 App 단계 문제



IPV4 헤더 형식

   20byte|        1480byte(경우에 따라 MTU는 0~65535byte까지 증가)
 ----------------------------------------
|	|
|HEADER	|	PAYLOAD
|	|
------------------------------------------

0	4	8		16		32bit        
  Version |    IHL	|	TOS	 |       Total Length               
          Identification		 | Flags | Fragment offset       
  TTL		|   Protocol	 |   Header checksum	  
			Source address(출발지)		| 
			Destination address(목적지)		| 
			Option				|
			Data				|

1행
Version : 4
IHL(Internet Header Length) : 헤더 행의 갯수(주로 5)
	열은 32 bit 임으로 
	->(5*4byte) = 20byte
TOS : 서비스 유형 및 혼잡알림을 나타내는 8bit 필드
Total Length(16bit) -> 0~65535경우의 수

2행 : 단편화와 관련됨 
  단편화 : 네트워크마다 MTU값이 다르기 때문에 크기에 맞춰 자르는것

3행
TTL(8bit) : 패킷 유통과정에서 홉을 만나면 TTL이 값이 줄며 0이되면 버림
Time to live
Protocol : Packet의 payload 내부의 헤더를 해석하는 방법(TCP,UDP)
	고유번호가 존재함
Header checksum : 패킷의 송수신과정에서 손상여부를 검사하는 값



Subnet Mask 
  네트워크 Id와 HostId를 나눠주는 기준
  192	    .168	        .0	          .10
  1100 0000  1010 1000  0000 0000 | 0000 1010(net Mask)
  		bit AND 연산(Mask 연산)
  1111 1111  1111 1111  1111 1111 | 0000 0000 (subnet Mask 값)
		↓
  1100 0000  1010 1000  0000 0000 | 0000 0000 -> hostid 잘림

  패킷이 도착했을때 네트워크 장비가
  넷마스크와 서브넷 마스크연산을 통해 네트워크 id를 확인함
   -> 일치여부로 목적지여부를 판단함

 Host id를 어디까지 볼것이냐에 따른 클래스 기준
 A class .168.0.10 // 255 0 0 0 (서브넷주소) 
 B class  0.10 // 255 255 0 0
 C class .10 //  255 255 255 0
Sub Netting // 255 255 255 192 
	C class 네트워크 방식에서 추가로 쪼갬(나머지 6bit로 hostid)

 -> 하지만 과거방식




CIDR (Classless Inter-Domain Routing)
	192.168.0.10/24
  -> /24를 추가함 (24bit 까지(192.168.0) 네트워크 id라고 표현함)



Broadcast(반대말 : unicast) IP주소 (cf : Mac주소 : 48bit FF-FF-FF-FF
   192.168.0.255
    -> HostId 가 255면 192.168.0 네트워크의 방송 주소가 됨
    -> 192.168.0 에 해당하는 네트워크에 모두 송신 됨
     cf) HostId의 경우 0(서브넷 마스크 결과값),1(주로 게이트웨이가 해당 주 소를 받음),255(Broadcast용 주소)는 못쓰고 253가지 경우의 수만 쓸 수 있음



Host 자신을 가르키는 Ip주소
  동일 컴퓨터의 Process 들끼리 통신이 필요할 때 사용됨
    -> 127.0.0.1 -> Loopback Address(나자신의 주소)
     -> Driver 밑단으로 안가게 해줌

		             ------------------   -------------------
			| Process #1 	Process #2
			| (Client)		(Server)
			|
			-------------------  ------------------		
 	User mode 	|   Socket#1	Socket#2
	----------------------------------------------------------
	Kernel mode	 TCP
			  IP

S/W(Logical ≈  Virtual)	 Driver
-------------------------------------------------- --------------------
H/W(Physical)		

  동일 컴퓨터 내에  Client가 Sever에 접속하려고 할때 == (IPC(Inter process communication) 통신을 할때 )
    Client의 ip주소로 연결하는 것이 아닌 127.0.0.1로 접속함
  cf)  192.168.0.10 변경이 가능한 주소임으로 불안정




Internet
  인터넷은 라우터의 집합체라고 할 수 있는 논리 네트워크이다
    Router ⊂ L3 Switch or L3 Switch ⊂ Router Router == L3 Switch
	     -> 논란의 여지가 있음

  Internet의 핵심 구성요소
    -> Router + DNS

  Packet이 목적지를 찾아가다 길을 잃었다면 삭제해야함(네트워크혼란야기)
  Router1(TTL값 128) -> Router2(TTL값 128)
  |-----------------------------------|
	ㄴHop : 한 라우터에서 다른 라우터로 이동하는 단위




단편화(Fragmentation) 
  단편화는 MTU크기 다름으로 인해 발생함
    -> 1400바이트가 용량한계인 경우 1500은 못받음으로 잘라서 보내야함
  ex) 패킷을 A,B로 나누고 IP헤더를 생성해서
        복사한 B의 Payload값에 붙여줌
    -> 이후 수신측 Ip protocol에서 조립하여 Segment를 꺼냄 
    -> TCP에서 Segment 조립후 Process에 넘겨줌
    
   단편화는 발생하지 않는게 좋음
	-> 송신 과정에서 통과하는 라우터의 MTU중 가장 작은 값에 
                 맞추서 보내 주로 해결함 ->다른 기술도 많음
   단편화는 주로 VPN(IpSec->터널링기술)이 적용되었을 때 발생함




L3 단계에서 인터넷 사용 전에 해야 할 설정
   ISP(internet service provider) 인터넷 제공회사
  1.Host의 식별자가 필요 -> IP주소
  2. Subnet Mask
  3. GateWay Ip주소
  4. DNS 주소
  Ip주소를 자동을 할당 받는 -> DHCP


DHCP(Dynamic(=runtime) Host Configuration Protocol)
  인터넷에 필요한 4가지 설정을 자동으로 해줌
     -> DHCP서버가 알려줌
  특정 Pc가 켜지면 Broadcast packet을 발송함-> DHCP서버를 찾기 위해
  DHCP 서버에는 사용가능한 IP주소를 pool에 저장해놓음
  DHCP 서버는 Broadcast 도메인 안에 있어야됨


ARP(Address Resolution Protocol)
        ㄴIPv4, MAC -> Host의 기본적인 주소
  ARP는 Ip주소로 MAC주소를 알아내려고 할때
  보통 PC를 부팅하면 Gateway MAC주소를 찾아내기 위해
  ARP Request가 발생하고 Reply를 받음(Gateway MAC주소없으면 통신못함)
  
   ex) PC네이버에 접속하려면 Gateway MAC주소를 반드시 알아야함
   cf) Frame의 목적지 주소는 Gateway MAC주소이다(네이버주소아님)
   
    -> ARP 통신후 GATEway MAC주소를 자주 사용하기 때문에 Cashe에 저장해놓고 이후에 또 사용됨 -> cmd arp -a 를 통해 해당 캐쉬 확인가능



Ping과 RTT
  Ping 유틸리티(그냥 프로그램 이름)는  ICMP 프로토콜을 사용하여 특정 Host에 대한 RTT(Round Trip Time)을 측정할 목적으로 사용된다.
  DoS(Denial of Service) 공격용으로 악용되기도 함
  
   RTT는 네트워크 속도에 영향(거리도 어느정도 영향)
   ICMP(internet control message protocol) : 오류 보고 및 네트워크 진단
    				          L3단계에 속함
   cmd -> ping 에서 확인 가능



TCP와 UDP
  식별자 : Port 번호
  TCP에만 연결(Connection, Session) 개념이 있다.
  TCP를 Virtual Circuit이라고도 함
  연결을 결과적으로 순서번호로 구현된다. 
	-> Segement의 번호는 크기에따라 부여함
		1번(400byte) -> 다음번호는 401
  연결은  '상태(전이)' 개념을 동반한다  
     ex) 전화(연결) 전 -> 통화 -> 전화 후
  TCP는 배려남,  		UDP는 나쁜남자에 비유
   ㄴZeroWindow고려해줌     ㄴ 그냥 보냄
  
 기본단위 : TCP(Segement), UDP(Datagram)



TCP 연결 과정 (3-way handshaking)
  TCP 연결은 Seq 번호를 교환, 정책 교환하며 중요한 MSS값도 포함됨
	-> 관리적 정보(Protocol)을 교환함
   Client,서버 중 작은 MSS에 맞춰 Segement를 보냄 
  Segement 단위로 통신되지만 기존 Segement와 달리 IP/TCP헤더만 있음
  1. Client가 서버에 SYN(1000->Sequence number : 연결 요청
  2. 대기중이던 서버가 연결을 확인하면 자기의 Sequence number과 받은 Seq+1을 ACK로 넘겨줌
  3. Client가 서버 Seq +1을 하여 ACK해줌  

 cf)Client가 생각하는 연결완료시점과 Server가 연결된시점이다르다고느낌


TCP 연결 종료과정(4-way handshaking)
  특별한 상황이 아니면 연결,종료는 Client가 요청하게 해야 함
  서버가 Fin+ACk를 받으면 받았다는 ACK를 보내고 종료휴 FIN+ACK를 또 보내줌
  Client가 FIN+ACK를 받으면 Client는 Time_Wait 상태가 되고 마지막 ACK를 보내줌 
 Time wait는 연결 종료 주체에서 발생하며 서버에 Time_wait 상태가 있다면 특수한 상황임을 유추할 수 있음
  Time wait상태로 시간을 보내고 CLOSED 상태가되면서 소켓을 반환함
    ->서버가 종료 요청하면 Client는 Timewait 상태가 될수 없어 소켓의 낭비가 발생할 수 있음
    -> 특수한 상황에서 서버가 종료 요청을 하기 위해서는 Application Protocol 단계에서 특수상황에 대한 구현이 필요함(서버가 Client에게 종료 요청을 유도하는 방식)



TCP 헤더 형식
  TCP의 포트 번호를 S/W가 사용함 
     -> Well known port numer :  80번호는 웹서비스에서 많이 사용됨
  Sequence number : Data가 있다면 기존 num + data크기만큼 증가함
  Data offset : data 여부 및 크기
  Flag : 송신 되는 정보 종류 
   SYN,FIN,ACK, RST(reset),PSH(버퍼링없이)
  NS,CWR,ECE -> 혼잡제어->네트워크 장애를 통제하기 위함
  Checksum : 데이터 무결성에 계산에 필요한 값
   

UDP 헤더 형식
  Src prot, Des port, length,checksum 만 있음
    -> 네트워크 혼잡제어 등 배려하지 않고 송신하기만 함

 UDP 이용 경우
  IPTV(영상송출)에서 주로 사용 (Client 별로 네트워크속도가 다르기 때문에 일단 데이터를 막 보냄)
  게임서버에서 TCP를 사용하면 속도가 하향 평준화됨 -> 네트워크 혼란시 
  ACK발생으로 인해 렉이 많이 걸림
  UDP의 경우 데이터가 손실되더라도 렉안걸리는게 낫고 TCP혼잡제어를 UDP에 구현하면 해결됨
  HTTP3도 UDP를 사용함



TCP '연결'은 착각                ┌ '충격'이라고도 함(네트워크가 끊김)
  파일 다운로드 중 LAN 케이블을 분리하고 다시 연결하면 TCP연결은?
    ->일단은 TCP연결 유지됨 (분리한 시간에 따라 다르긴함)
    -> 이런경우 +a 때문에 TCP연결 여부를 Process단계에서 계속 확인함
						ㄴ Heartbeat
  재전송 타이머의 기본 근사 값은  대략 3초지만 대부분의 운영체제는 1초미만임
    -> 3-way handshake중 SRTT(Start Round trip time)값을 계산함
	-> SRTT값을 참고해 대기시간을 결정함
                                             ㄴ 튜닝
  재전송 타이머 만료 후에도 확인 응답을 받지 못한 경우 Segement를 재전송하고 RTO(Retransmisson Time-out)값은 두배로 증가함
     ex) 1초>2초>4초>8초>16 초 간격으로 재전송함
   보통 최대 5회 재전송을 시도하면 모두 실패시 전송오류 발생

   무선의 경우 늘상 충격이 발생하며 Buffer가 충격완화 역할을 해줌
   				ㄴ미리 저장한게 있기 때문
 

TCP 연결과 게임 버그
  아이템 복제 버그가 있었음
    -> 원인은 논리적 TCP연결과 물리적 링크간 차이를 이용한 시간차 공격였으며 TCP연결은 End-point의 주관적인 판단에 불과함
  ex) A가 아이템을 떨구고 다시 줍는과 동시에 LAN을 끊고 1초안에 다시 연결 시킴, B 입장에서 아이템이 여전히 떨어져있지만 ,A입장에서 TCP연결이 살아있음, A가 다시 연결되는 순간 B는 아이템을 줍고, A는 잔존하는 TCP연결 때문에 A도 검이 주운상태가됨 -> A,B모두 아이템을 얻음

  -> Client(End-point)입장에서 SYN을 보내고 SYN+ACK가 오면 연결이 됐다고 착각함

  TCP는 보안성(기밀,무결,가용) 없는 연결임
	기밀 : 도청여부
	무결 : 데이터의 조작여부
	가용 :  정보의 사용가능 여부


DNS(Domain name service)
  L1 ~ L4 부터는 APP에서 서비스를 제공하기 위한 Infra인데
  DNS의 경우 App단계에서 Infra역할을 해줌
    ex) www.naver.com -> 네이버의 TCP/IP 주소를 이름으로 알려줌
        |host |
        |www|.naver.com
        | domain name |
      

  -분산 구조형 데이터베이스
     데이터베이스 시스템의 분산 구성
     데이터의 영역별 구분 및 분산관리

  -트리 구조의 Domain 네임 체계   
    Domain : 영역 
    도메인 네임의 자율적 생성
    생성된 도메인 네임은 언제나 유일하도록 네임 체계 구성

ex) 사용자가 네이버 접속하려함 -> 해당 pc의 운영체제가 Ip설정에 포함되어있는 DNS주소( ex) KT DNS 주소)를 확인함 -> 운영체제가 DNS 주소에 www.naver.com의 IP주소를 질의함 -> DNS 서버가 알려줌
  cf) DNS 주소의 경우 주로 ISP(KT)에서 정해줌
  cf) PC가 한번이라도 DNS에 질의 했을 때 해당 IP주소를 메모리에 저장해둠 -> DNS Cache -> cmd에서 해당 캐시보는법 ipconfig /displaydns 
                                    ㄴ 캐쉬의 유효기간도 존재
   cf) DNS forewarding -> 공유기가 DNS 역할을 할때도 있음
   cf) Window의 hosts파일 -> DNS에 묻지않고 해당 파일에 있는대로 행동함 -> DNS Cache의 메모리가 위치한 파일
   cf) DNS 서버 자체도 캐쉬메모리라 일정시간이 지나면 삭제됨
        -> 삭제된 Domain주소를 요청하면 트리구조인 DNS의 루트인 RootDNS에 물어봄->.com / .net 등등 담당 DNS IP "목록"을 알려줌 
-> KT DNS 서버가 목록 IP 중 하나에 다시 물어봄
  

웹 기술의 창시자와 대한민국 인터넷
  팀 버너슬 리 -> 입자물리연구소에서 근무(HTML, HTTP의 창시자)
  HTML : 문서(논문의 참고문헌의 참고문헌의 참고문헌 -> 연결되는 느낌)
  HTTP : HTML 문서를 싣기하기 위해 설계됨

  전길남 -> 국내 첫 인터넷 연결(세계 두번째 ㄷㄷ)
	-> 미국이 라우터 안팔아서 만드심...ㄷㄷ
	  -> 제자들은(리니지 넥슨) 게임 만듬 ㅋㅋㅋ


URL(Uniform Resource Locator) 과 URI(Uniform Resource Identifier)
    URL⊂URI 관계임
  Resource란? : web(HTML+HTTP)에 한정지어서 HTML file임
  URL : HTML File의 위치
  
  URI 구조
     URI = scheme ":" ["//" authority] path ["?" query] ["#" fragment]
       Protocol: Address:Portnumber/Path(or filename)?Parameter=value          http://www.test.co.kr/course.do?cmd=search&serach_keyword=Test
                  Host구별    / 파일경로


HTTP : HTML문서를 전송 받기 위해 만들어진 응용 프로그램 계층( L7) 통신 프로토콜 ( ->모두 문자열로 이루어짐)
  -> 기본적으로 클라이언트의 요청에 대응하는 응답형식으로 작동한다.
  -> L5이상 통신은 소켓통신-> 소케통신의 데이터는 Stream data
  -> Stream의 시작과 끝은 HTTP에 있음
   헤더 분류
      일반헤더
      요청헤더 -> HTML Request ->요청에 사용되는 메소드 GET,POST
      응답헤더 -> 요청한 HTML을 Response해줌
      엔티티헤더 

HTTP 메소드
  GET -> Res를 다운로드 느낌
  POST -> Res를  Upload 느낌 (Id/password로그인),(파일 업로드)
  HEAD -> 
  TRACE
  PUT -> Res를 새롭게 업로드
  DELETE -> Res 삭제
  OPTIONS
  CONNECT
HTTP 응답 코드
  200 : OK
  201 : CREATE(요청에 대한 새로운 자원을 생성하는데 성공)
  301 : Moved permanently
  302 : Found
  400 : Bad Request(HTTP 규약에 맞지 않는 요청)
  403 : Forbidden (권한이 없거나 잘못된 파일 실행 접근시도)
  404 : Not found (Client가 Res 요청했지만 서버에서 해당 Res이 없음)
	ex) .jpg파일을 요청했지만 없어서 x 표시됨
  500 :  Internal server error( 내부 오류때문에 요청을 처리할 수 없음)
	ex) 서버의 백엔드단에서 심각한 내부오류가 발생함

웹 서비스 기본 구조
 
 Web Client			Web Server
       |       --- TCP/IP 및 HTTP 세션 생성 --->
       |	 --- HTML 문서 전송요청(GET)  --->
       |	 <---서버에서 HTML문서를 수신하고 연결종료---

HTTP Traffic
  소켓 수준에서 만들어지며 끝을 모르는 Stream을 다룸
  Stream을 Segement,Packet으로 분할하고 IP Stack에서 전송함

SW 개발시 설계원칙-> 유지,보수 쉽게 하기 위해
  GUI, DATA,제어의 구조를 분리시켜야한다

WAS : Web Application Server

	WEB             
       HTML,HTTP(상태 개념이 없음 Statless)
				     ┌ 송수신 담당
   ┌Browser(문서뷰어)                          ┌ Resource(HTML,CSS,JS)
PC(Client)---Internet--IPS-SSL- WAF- Web Server---WAS--- DB(자료담당)
      | HTTPS 통신	          | HTTP통신	      |
1     | TCP/IP 연결, HTTP 통신                   |       ㄴ처리담당      
2     | http.request.method==GET 요청-->   |       |
3     | <--HTML(DATA), CSS(UI), JS, JPG 보냄 |       |
       |				        |       |
4     | http.request.method==POST ---->     |       |   ODBC,JDBC
       | ex)로그인  id='tester'&pwd="1234"                ㄴ서버끼리연결한 
					           인터페이스
       |                                                    |       | 검증요청(SQL)
5     |<---동적 HTML 문서를 보냄                | <--  |  결과송신   

6    					    | APM      		
       |1-tier                                              |1tier  |1tier   -->3-tier
1. 브라우저에서 Domain입력함 ->DNS에게 IP주소를 물어봄
  ->얻은 IP주소로 접속후 TCP 통신 연결 -> HTTP통신 연결
2. HTTP의 GET 메소드를 서버에 요청함
3. Web 서버에서 받은 HTML문서를 브라우저(문서뷰어)에 표시(렌더링)함
    -> 설계 원칙에 따라 UI와 DATA를 분리하기 위해 CSS를 분리함
    -> 정적인 HTML 문서를 동적인 제어와 움직임을 위해 JS 탄생함
    -> CSS,JS로 인해 렌더링 하기전에 구문분석을 해야함(text+tag 분리)
    -> 구문분석 후 tag에 맞게 렌더링 -> Js 엔진 적용 -> JS는 Client 단계에서 이루어짐 -> 보안적으로는 크게 도움이 안되면 보안은 서버에서 해야함
    -> Client가 서버에 요청하는 GET은 단방향 통신이라 상호작용이 좋지는않음

4. 서버와 양방향 상호작용하기 위한 POST
     양방향 상호작용을 위해서는 상태전이가 필요해지는데 HTML은 상태가 없음 -> 상태를 기억하기 위해 Client에 Cookie를 구현, Server는 기억할게 많음으로 DB에 저장함 
     ex) id='tester'&pwd="1234"  -> 서버 관점에서 원격지 사용자의 입력
				ㄴ>신뢰할수 없고 검증 대상임
     -> 검증시 원격자 사용자 입력값에 SQL 조사함
     -> WEB server가 직접 DB에 접근하지 않고 연산처리 서버에 접근함
     -> 연산서버에는 값이 비어있는 동적인 문서가 있고 로그인 요청정보를 바탕으로 새로운 문서를 생성함 ex) tester님 안녕하세요
                    ㄴ ex) JSP (java server page)
     -> DB에서 id,pwd 비교하여 검증함 
     -> Cookie는 Key=value형태로 이루어짐

  cf) Req이 Read,Write,Update,Delete(CRUD)라면?
      Req은 이 상황에서 함수 호출자 -> CRUD에 구현된 함수를 호출함
      Web의 CRUD에 구현된 함수를 RestFul API라고함
      						
 
5. 브라우저의 화면이 검증 결과에 따라 동적인 HTML문서를 바탕으로 바뀜
 하지만 Iphone,android,PC등 Client가 다양해져 이에 맞는 Template이 필요함 ->일일이 Ui를 만들기 보다는 UI와 DATA가 동시에 날라오는 상황에서 이를 분리하고 DATA만 보냄(XML,JSON 형태) -> JS가 받은 data로 Client Ui에 맞게 HTML을 생성함 (JS framework 예시) Rreact.js, view.js
 
  cf) View : HTML, 검증결과 틀(Template) ->ex) JSP (java server page)
      Model :  DB, 검증결과를 결합한 최종적인 View
      Control : 네트워크상 Request에 따른 제어체계

6. 네트워크 속도가 빨라도 DB가 응답하지않으면 의미가 없다
    SQL 질의에 대한 응답시간이 중요함-> 서비스 품질 평가에 큰역할
       -> APM이라는 스카우터가 이를 평가해줌
       -> APM이 JVM도 평가함
	JSP,PHP,ASP 
          -------------------------------------------------------------
	Framework
 	----------------------------------------------------
	Middleware (Java byte code를 기반으로 App을 작동함)
                               ㄴ 다른 S/W가 잘 작동하기 위한 S/W
              ex) TCP/IP,DB,File  -> Java기반 말고도 이런 기능은 필요함
                                      -> 개발 단계에서 해당 부분을 안해도됨
         ------------------------------------------------------------
          Java byte code ( JVM이 인식할 수 있는 명령체계)
                -----------------------------
         user  CPU (Java 기반의 S/W CPU) -> Java Virtual Machine
          ----------------------------
         kernel  
         S/W -> logical = Virtual
           --------------
         H/W CPU Machine

	JVM : Java를 위해 소프트웨어로 구현된 CPU
            Middleware==WAS ex) Tomcat
	Framework ~ JVM까지 Container이라고 함

보안 
 IPS(1차보안), SSL(가속기) , WAF(Web Application Firewall)(2차보안)
        WAF 위치가 Web과 WAS사이에 옮길 수 도있음
 SSL : 암호화
         HTTPS 통신 -- SSL -- HTTP 통신
	SSL을 통과하면 HTTP 통신